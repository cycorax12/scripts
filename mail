import requests
import csv

# Jira base URL (update with your Jira Server/DC URL)
JIRA_BASE_URL = "https://your-domain.com"

# Your Jira API token (Bearer auth)
JIRA_TOKEN = "YOUR_JIRA_API_TOKEN"
HEADERS = {
    "Authorization": f"Bearer {JIRA_TOKEN}",
    "Accept": "application/json"
}

def get_issues_in_project():
    """
    Get all issues in project ASPEN created since June 1, with pagination.
    """
    jql = 'project = ASPEN AND created >= "2025-06-01"'
    url = f"{JIRA_BASE_URL}/rest/api/2/search"

    issues = []
    start_at = 0
    max_results = 1000

    while True:
        params = {
            "jql": jql,
            "fields": "key",
            "startAt": start_at,
            "maxResults": max_results
        }
        response = requests.get(url, headers=HEADERS, params=params)
        response.raise_for_status()
        data = response.json()

        new_issues = [issue["key"] for issue in data.get("issues", [])]
        issues.extend(new_issues)

        if start_at + max_results >= data.get("total", 0):
            break

        start_at += max_results

    return issues

def check_if_project_changed(issue_key):
    """
    Check the changelog of an issue to see if project was changed.
    Returns list of changes.
    """
    url = f"{JIRA_BASE_URL}/rest/api/2/issue/{issue_key}?expand=changelog"
    response = requests.get(url, headers=HEADERS)
    response.raise_for_status()
    changelog = response.json().get("changelog", {})
    histories = changelog.get("histories", [])
    
    project_changes = []
    for history in histories:
        for item in history.get("items", []):
            if item.get("field") == "project":
                project_changes.append({
                    "issue": issue_key,
                    "changed_at": history.get("created"),
                    "from": item.get("fromString"),
                    "to": item.get("toString")
                })
    return project_changes

def main():
    issues = get_issues_in_project()
    print(f"Found {len(issues)} issues in project ASPEN since 2025-06-01")

    all_changes = []
    for issue in issues:
        changes = check_if_project_changed(issue)
        all_changes.extend(changes)

    # Write results to CSV
    with open("jira_project_moves.csv", "w", newline="") as csvfile:
        fieldnames = ["Issue", "Date of Move", "From Project", "To Project"]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for change in all_changes:
            writer.writerow({
                "Issue": change["issue"],
                "Date of Move": change["changed_at"],
                "From Project": change["from"],
                "To Project": change["to"]
            })
    print("âœ… Results written to jira_project_moves.csv")

if __name__ == "__main__":
    main()